generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Language {
  id                 String              @id @default(cuid())
  code               String
  name               String
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  optionTranslations OptionTranslation[]
  pollTranslations   PollTranslation[]
  users              User[]

  @@map("languages")
}

model User {
  id         String    @id @default(cuid())
  email      String
  name       String
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  languageId String?
  polls      Poll[]
  language   Language? @relation(fields: [languageId], references: [id])
  votes      Vote[]

  @@index([languageId], map: "users_languageId_fkey")
  @@map("users")
}

model Poll {
  id           Int               @id @default(autoincrement())
  isActive     Boolean           @default(true)
  isPublic     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userId       String
  options      Option[]
  translations PollTranslation[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@index([userId], map: "polls_userId_fkey")
  @@map("polls")
}

model PollTranslation {
  id          String   @id @default(cuid())
  pollId      Int
  languageId  String
  title       String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, languageId])
  @@index([languageId], map: "poll_translations_languageId_fkey")
  @@map("poll_translations")
}

model Option {
  id           String              @id @default(cuid())
  pollId       Int
  createdAt    DateTime            @default(now())
  translations OptionTranslation[]
  poll         Poll                @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@index([pollId], map: "options_pollId_fkey")
  @@map("options")
}

model OptionTranslation {
  id         String   @id @default(cuid())
  optionId   String
  languageId String
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([optionId, languageId])
  @@index([languageId], map: "option_translations_languageId_fkey")
  @@map("option_translations")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String?
  pollId    Int
  optionId  String
  createdAt DateTime @default(now())
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([userId, pollId])
  @@index([optionId], map: "votes_optionId_fkey")
  @@index([pollId], map: "votes_pollId_fkey")
  @@map("votes")
}
