# HTTP サーバー設定（リダイレクト用）
server {
    listen 80;
    server_name vote.impeach.supplynexus.store;
    
    # HTTP から HTTPS へのリダイレクト
    return 301 https://$server_name$request_uri;
}

# HTTPS サーバー設定 - 真正的前后端分离
server {
    listen 443 ssl http2;
    server_name vote.impeach.supplynexus.store;

    # SSL 証明書設定
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL 設定
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # セキュリティヘッダー
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # クライアントの最大ボディサイズ
    client_max_body_size 10M;

    # プロキシヘッダー
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # タイムアウト設定
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # アップストリーム設定
    upstream frontend {
        server frontend:3000;
    }
    
    upstream backend {
        server backend:3001;
    }

    # ヘルスチェック
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API ルート - バックエンド専用
    location /api/ {
        # CORS ヘッダー
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # OPTIONS リクエストの処理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # バックエンドにプロキシ
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # API レスポンスのキャッシュ設定
        proxy_cache_valid 200 1m;
        proxy_cache_valid 404 1m;
        add_header X-API-Cache $upstream_cache_status;
        add_header X-Backend-Server "backend" always;
    }

    # 静的ファイル - フロントエンド専用
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        proxy_pass http://frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Static-File "true";
        add_header X-Frontend-Server "frontend" always;
    }

    # Next.js の静的ファイル
    location /_next/ {
        proxy_pass http://frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Frontend-Server "frontend" always;
    }

    # メインアプリケーション - フロントエンド専用
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        
        # SSR ページのキャッシュ設定
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        add_header X-SSR-Cache $upstream_cache_status;
        add_header X-Frontend-Server "frontend" always;
    }
} 