const { PrismaClient } = require('@prisma/client')
const Hashids = require('hashids')

const prisma = new PrismaClient()

// HashIDsË®≠ÂÆö
const hashidsSecret = process.env.HASHIDS_SECRET || 'impeach-vote-secret-key'
const hashids = new Hashids(hashidsSecret, 8, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')

async function verifyAllHashIds() {
  try {
    console.log('üîç „Åô„Åπ„Å¶„ÅÆhashId„ÇíÊ§úË®º‰∏≠...')
    console.log('')

    // „Åô„Åπ„Å¶„ÅÆÊäïÁ•®„ÇíÂèñÂæó
    const polls = await prisma.poll.findMany({
      orderBy: { id: 'asc' }
    })

    console.log(`üìä ${polls.length}‰ª∂„ÅÆÊäïÁ•®„ÇíÊ§úË®º„Åó„Åæ„Åô:`)
    console.log('')

    let allValid = true

    for (const poll of polls) {
      console.log(`ÊäïÁ•®ID ${poll.id}:`)
      console.log(`  ‰øùÂ≠ò„Åï„Çå„ÅühashId: "${poll.hashId}"`)
      
      // hashId„Çí„Éá„Ç≥„Éº„Éâ
      const decoded = hashids.decode(poll.hashId)
      console.log(`  „Éá„Ç≥„Éº„ÉâÁµêÊûú: ${decoded}`)
      
      // Ê≠£„Åó„ÅÑID„Å®‰∏ÄËá¥„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      const isValid = decoded.length > 0 && decoded[0] === poll.id
      console.log(`  ÊúâÂäπ: ${isValid ? '‚úÖ' : '‚ùå'}`)
      
      if (!isValid) {
        allValid = false
      }
      
      // ÁèæÂú®„ÅÆË®≠ÂÆö„Åß„Ç®„É≥„Ç≥„Éº„Éâ„Åó„ÅüÁµêÊûú
      const currentEncoded = hashids.encode(poll.id)
      console.log(`  ÁèæÂú®„ÅÆË®≠ÂÆö„Åß„Ç®„É≥„Ç≥„Éº„Éâ: "${currentEncoded}"`)
      console.log(`  ‰∏ÄËá¥: ${poll.hashId === currentEncoded ? '‚úÖ' : '‚ùå'}`)
      console.log('')
    }

    if (allValid) {
      console.log('üéâ „Åô„Åπ„Å¶„ÅÆhashId„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ')
    } else {
      console.log('‚ö†Ô∏è  ‰∏ÄÈÉ®„ÅÆhashId„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô')
    }

    // Êñ∞„Åó„ÅÑÊäïÁ•®„Çí‰ΩúÊàê„Åó„ÅüÂ†¥Âêà„ÅÆ„ÉÜ„Çπ„Éà
    console.log('üß™ Êñ∞„Åó„ÅÑÊäïÁ•®ID„ÅÆ„ÉÜ„Çπ„Éà:')
    const testIds = [1, 2, 13, 14, 15]
    testIds.forEach(id => {
      const encoded = hashids.encode(id)
      const decoded = hashids.decode(encoded)
      console.log(`  ID ${id} -> "${encoded}" -> ${decoded[0]} (${decoded[0] === id ? '‚úÖ' : '‚ùå'})`)
    })

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  } finally {
    await prisma.$disconnect()
  }
}

verifyAllHashIds()
